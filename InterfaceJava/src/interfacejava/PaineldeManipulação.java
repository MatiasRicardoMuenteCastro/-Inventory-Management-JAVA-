/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfacejava;

import connection.Conexao;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import connection.ConsultaSQL;
import java.sql.ResultSet;

/**
 *
 * @author Matias
 */
public class PaineldeManipulação extends javax.swing.JFrame {

    /**
     * Creates new form PainelDesenvolvedor
     */
    public PaineldeManipulação() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ComandoSTR = new javax.swing.JTextField();
        Atualizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDev = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel1.setText("Painel de Manipulação");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        jLabel2.setText("Digite a coluna e os dados que serão modificados: ");

        ComandoSTR.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N

        Atualizar.setBackground(new java.awt.Color(255, 255, 255));
        Atualizar.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        Atualizar.setText("Atualizar");
        Atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtualizarActionPerformed(evt);
            }
        });

        jTDev.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Coluna 1", "Coluna 2", "Coluna 3", "Coluna 4", "Coluna 5"
            }
        ));
        jScrollPane1.setViewportView(jTDev);

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jButton3.setText("Voltar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fornecedores", "Vendas", "Estoque", "Clientes", "Funcionarios" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inserir", "Deletar" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jButton1.setText("Mostrar Tabela");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jButton2.setText("Limpar Tabela");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ComandoSTR, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(84, 84, 84))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(258, 258, 258))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(Atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(ComandoSTR))
                    .addComponent(jComboBox2, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(jComboBox1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(59, 59, 59))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtualizarActionPerformed
        int tabela = jComboBox1.getSelectedIndex();
        int opc = jComboBox2.getSelectedIndex();
        String CaixaDados = String.valueOf(ComandoSTR.getText());
        if(opc == 0 && tabela == 0){
        try{
        Conexao con = new Conexao();
        con.getConexao();
        Connection conexao1;
        conexao1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/loja","root","");
        String Query = "INSERT INTO fornecedores values ("+CaixaDados+")";
        PreparedStatement stmt = conexao1.prepareStatement(Query);
        ComandoSTR.setText("");
        stmt.executeUpdate(Query);
        JOptionPane.showMessageDialog(null,"Dados inseridos com sucesso!");
        }
        catch(SQLException ex){
        if(opc == 0){
        JOptionPane.showMessageDialog(null,"Erro na inserção de dados na tabela, verifique a quantidade de dados\ninseridos em relação as colunas da tabela.\n\n Número de colunas de cada tabela:\n Tabela Clientes: 5 Colunas\n Tabela Estoque: 4 Colunas\n Tabela Fornecedores: 3 Colunas \n Tabela Funcionarios: 5 Colunas \n Tabela Vendas: 4 Colunas","Erro na modificação da tabela",JOptionPane.WARNING_MESSAGE);
        }
        else{
        JOptionPane.showMessageDialog(null,"Erro na deleção de dados da tabela","Erro",JOptionPane.WARNING_MESSAGE);
        }
        }
        }
        else if(opc == 0 && tabela == 1){
        try{
        Conexao con = new Conexao();
        con.getConexao();
        Connection conexao1;
        conexao1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/loja","root","");
        String Query = "INSERT INTO vendas values ("+CaixaDados+")";
        PreparedStatement stmt = conexao1.prepareStatement(Query);
        ComandoSTR.setText("");
        stmt.executeUpdate(Query);
        JOptionPane.showMessageDialog(null,"Dados inseridos com sucesso!");
        }
        catch(SQLException ex){
        if(opc == 0){
        JOptionPane.showMessageDialog(null,"Erro na inserção de dados na tabela, verifique a quantidade de dados\ninseridos em relação as colunas da tabela.\n\n Número de colunas de cada tabela:\n Tabela Clientes: 5 Colunas\n Tabela Estoque: 4 Colunas\n Tabela Fornecedores: 3 Colunas \n Tabela Funcionarios: 5 Colunas \n Tabela Vendas: 4 Colunas","Erro na modificação da tabela",JOptionPane.WARNING_MESSAGE);
        }
        else{
        JOptionPane.showMessageDialog(null,"Erro na deleção de dados da tabela","Erro",JOptionPane.WARNING_MESSAGE);
        }
        }
        }
        else if(opc == 0 && tabela == 2){
        try{
        Conexao con = new Conexao();
        con.getConexao();
        Connection conexao1;
        conexao1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/loja","root","");
        String Query = "INSERT INTO estoque values ("+CaixaDados+")";
        PreparedStatement stmt = conexao1.prepareStatement(Query);
        ComandoSTR.setText("");
        stmt.executeUpdate(Query);
        JOptionPane.showMessageDialog(null,"Dados inseridos com sucesso!");
        }
        catch(SQLException ex){
        if(opc == 0){
        JOptionPane.showMessageDialog(null,"Erro na inserção de dados na tabela, verifique a quantidade de dados\ninseridos em relação as colunas da tabela.\n\n Número de colunas de cada tabela:\n Tabela Clientes: 5 Colunas\n Tabela Estoque: 4 Colunas\n Tabela Fornecedores: 3 Colunas \n Tabela Funcionarios: 5 Colunas \n Tabela Vendas: 4 Colunas","Erro na modificação da tabela",JOptionPane.WARNING_MESSAGE);
        }
        else{
        JOptionPane.showMessageDialog(null,"Erro na deleção de dados da tabela","Erro",JOptionPane.WARNING_MESSAGE);
        }
        }
        }
        else if(opc == 0 && tabela == 3){
        try{
        Conexao con = new Conexao();
        con.getConexao();
        Connection conexao1;
        conexao1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/loja","root","");
        String Query = "INSERT INTO clientes values ("+CaixaDados+")";
        PreparedStatement stmt = conexao1.prepareStatement(Query);
        ComandoSTR.setText("");
        stmt.executeUpdate(Query);
        JOptionPane.showMessageDialog(null,"Dados inseridos com sucesso!");
        }
        catch(SQLException ex){
        if(opc == 0){
        JOptionPane.showMessageDialog(null,"Erro na inserção de dados na tabela, verifique a quantidade de dados\ninseridos em relação as colunas da tabela.\n\n Número de colunas de cada tabela:\n Tabela Clientes: 5 Colunas\n Tabela Estoque: 4 Colunas\n Tabela Fornecedores: 3 Colunas \n Tabela Funcionarios: 5 Colunas \n Tabela Vendas: 4 Colunas","Erro na modificação da tabela",JOptionPane.WARNING_MESSAGE);
        }
        else{
        JOptionPane.showMessageDialog(null,"Erro na deleção de dados da tabela","Erro",JOptionPane.WARNING_MESSAGE);
        }
        }
        }
        else if(opc == 0 && tabela == 4){
        try{
        Conexao con = new Conexao();
        con.getConexao();
        Connection conexao1;
        conexao1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/loja","root","");
        String Query = "INSERT INTO funcionarios values ("+CaixaDados+")";
        PreparedStatement stmt = conexao1.prepareStatement(Query);
        ComandoSTR.setText("");
        stmt.executeUpdate(Query);
        JOptionPane.showMessageDialog(null,"Dados inseridos com sucesso!");
        }
        catch(SQLException ex){
        if(opc == 0){
        JOptionPane.showMessageDialog(null,"Erro na inserção de dados na tabela, verifique a quantidade de dados\ninseridos em relação as colunas da tabela.\n\n Número de colunas de cada tabela:\n Tabela Clientes: 5 Colunas\n Tabela Estoque: 4 Colunas\n Tabela Fornecedores: 3 Colunas \n Tabela Funcionarios: 5 Colunas \n Tabela Vendas: 4 Colunas","Erro na modificação da tabela",JOptionPane.WARNING_MESSAGE);
        }
        else{
        JOptionPane.showMessageDialog(null,"Erro na deleção de dados da tabela","Erro",JOptionPane.WARNING_MESSAGE);
        }
        }
        }
        else if(opc == 1 && tabela == 0){
        try{
        Conexao con = new Conexao();
        con.getConexao();
        Connection conexao1;
        conexao1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/loja","root","");
        String Query = "DELETE FROM fornecedores WHERE EmpresaFornecedora="+"'"+CaixaDados+"'";
        PreparedStatement stmt = conexao1.prepareStatement(Query);
        ComandoSTR.setText("");
        stmt.executeUpdate(Query);
        JOptionPane.showMessageDialog(null,"Dados deletados com sucesso!");
        }
        catch(SQLException ex){
        if(opc == 0){
        JOptionPane.showMessageDialog(null,"Erro na inserção de dados na tabela, verifique a quantidade de dados\ninseridos em relação as colunas da tabela.\n\n Número de colunas de cada tabela:\n Tabela Clientes: 5 Colunas\n Tabela Estoque: 4 Colunas\n Tabela Fornecedores: 3 Colunas \n Tabela Funcionarios: 5 Colunas \n Tabela Vendas: 4 Colunas","Erro na modificação da tabela",JOptionPane.WARNING_MESSAGE);
        }
        else{
        JOptionPane.showMessageDialog(null,"Erro na deleção de dados da tabela","Erro",JOptionPane.WARNING_MESSAGE);
        }
        }
        }
        else if(opc == 1 && tabela == 1){
        try{
        Conexao con = new Conexao();
        con.getConexao();
        Connection conexao1;
        conexao1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/loja","root","");
        String Query = "DELETE FROM vendas WHERE NomeProd='"+CaixaDados+"'";
        PreparedStatement stmt = conexao1.prepareStatement(Query);
        ComandoSTR.setText("");
        stmt.executeUpdate(Query);
        JOptionPane.showMessageDialog(null,"Dados deletados com sucesso!");
        }
        catch(SQLException ex){
        if(opc == 0){
        JOptionPane.showMessageDialog(null,"Erro na inserção de dados na tabela, verifique a quantidade de dados\ninseridos em relação as colunas da tabela.\n\n Número de colunas de cada tabela:\n Tabela Clientes: 5 Colunas\n Tabela Estoque: 4 Colunas\n Tabela Fornecedores: 3 Colunas \n Tabela Funcionarios: 5 Colunas \n Tabela Vendas: 4 Colunas","Erro na modificação da tabela",JOptionPane.WARNING_MESSAGE);
        }
        else{
        JOptionPane.showMessageDialog(null,"Erro na deleção de dados da tabela","Erro",JOptionPane.WARNING_MESSAGE);
        }
        }
        }
        else if(opc == 1 && tabela == 2){
            try{
        Conexao con = new Conexao();
        con.getConexao();
        Connection conexao1;
        conexao1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/loja","root","");
        String Query = "DELETE FROM estoque WHERE Produto='"+CaixaDados+"'";
        PreparedStatement stmt = conexao1.prepareStatement(Query);
        ComandoSTR.setText("");
        stmt.executeUpdate(Query);
        JOptionPane.showMessageDialog(null,"Dados deletados com sucesso!");
        }
        catch(SQLException ex){
        if(opc == 0){
        JOptionPane.showMessageDialog(null,"Erro na inserção de dados na tabela, verifique a quantidade de dados\ninseridos em relação as colunas da tabela.\n\n Número de colunas de cada tabela:\n Tabela Clientes: 5 Colunas\n Tabela Estoque: 4 Colunas\n Tabela Fornecedores: 3 Colunas \n Tabela Funcionarios: 5 Colunas \n Tabela Vendas: 4 Colunas","Erro na modificação da tabela",JOptionPane.WARNING_MESSAGE);
        }
        else{
        JOptionPane.showMessageDialog(null,"Erro na deleção de dados da tabela","Erro",JOptionPane.WARNING_MESSAGE);
        }
        }
        }
        else if(opc == 1 && tabela == 3){
            try{
        Conexao con = new Conexao();
        con.getConexao();
        Connection conexao1;
        conexao1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/loja","root","");
        String Query = "DELETE FROM clientes WHERE Nome='"+CaixaDados+"'";
        PreparedStatement stmt = conexao1.prepareStatement(Query);
        ComandoSTR.setText("");
        stmt.executeUpdate(Query);
        JOptionPane.showMessageDialog(null,"Dados deletados com sucesso!");
        }
        catch(SQLException ex){
        if(opc == 0){
        JOptionPane.showMessageDialog(null,"Erro na inserção de dados na tabela, verifique a quantidade de dados\ninseridos em relação as colunas da tabela.\n\n Número de colunas de cada tabela:\n Tabela Clientes: 5 Colunas\n Tabela Estoque: 4 Colunas\n Tabela Fornecedores: 3 Colunas \n Tabela Funcionarios: 5 Colunas \n Tabela Vendas: 4 Colunas","Erro na modificação da tabela",JOptionPane.WARNING_MESSAGE);
        }
        else{
        JOptionPane.showMessageDialog(null,"Erro na deleção de dados da tabela","Erro",JOptionPane.WARNING_MESSAGE);
        }
        }
        
        }
        else if(opc == 1 && tabela == 4){
        try{
        Conexao con = new Conexao();
        con.getConexao();
        Connection conexao1;
        conexao1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/loja","root","");
        String Query = "DELETE FROM funcionarios WHERE Nome='"+CaixaDados+"'";
        PreparedStatement stmt = conexao1.prepareStatement(Query);
        ComandoSTR.setText("");
        stmt.executeUpdate(Query);
        JOptionPane.showMessageDialog(null,"Dados deletados com sucesso!");
        }
        catch(SQLException ex){
        if(opc == 0){
        JOptionPane.showMessageDialog(null,"Erro na inserção de dados na tabela, verifique a quantidade de dados\ninseridos em relação as colunas da tabela.\n\n Número de colunas de cada tabela:\n Tabela Clientes: 5 Colunas\n Tabela Estoque: 4 Colunas\n Tabela Fornecedores: 3 Colunas \n Tabela Funcionarios: 5 Colunas \n Tabela Vendas: 4 Colunas","Erro na modificação da tabela",JOptionPane.WARNING_MESSAGE);
        }
        else{
        JOptionPane.showMessageDialog(null,"Erro na deleção de dados da tabela","Erro",JOptionPane.WARNING_MESSAGE);
        }
        }
        }
        
    }//GEN-LAST:event_AtualizarActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       PainelOpcoes painelopcoes = new PainelOpcoes();
       painelopcoes.dispose();
       painelopcoes.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
       
        
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int CaixaSelecionada = jComboBox1.getSelectedIndex();
        int opc = jComboBox1.getSelectedIndex();
	ResultSet rs;
        String Consulta;
        Conexao cn;
        
	switch(CaixaSelecionada){
	case 0:
        rs = null;
        Consulta = "select * from fornecedores"; //adaptar posteriormente
       
        cn = new Conexao();
        try {
            ConsultaSQL con = new ConsultaSQL(cn.getConexao(),Consulta);
            if (con.getError() == null){
            
            rs = con.getResultado();// ele só pega o primeiro resultado
            
            while(rs.next()){
            String cnpj = rs.getString("CNPJ");
            String empresa = rs.getString("EmpresaFornecedora");
            String telefone = rs.getString("Telefone");
            
            
            DefaultTableModel dtmClientes = (DefaultTableModel)jTDev.getModel();
            
            Object[] dados = {cnpj,empresa,telefone};
            dtmClientes.addRow(dados);
            
            }
            }
            
            
        } catch (SQLException ex) {
        
        }
        break;
	case 1:
        rs = null;
        Consulta = "select * from vendas"; //adaptar posteriormente
       
        cn = new Conexao();
        try {
            ConsultaSQL con = new ConsultaSQL(cn.getConexao(),Consulta);
            if (con.getError() == null){
            
            rs = con.getResultado();// ele só pega o primeiro resultado
            
            while(rs.next()){
            String NomeProd = rs.getString("NomeProd");
            String PrecoProd = rs.getString("PrecoProd");
            String Envio = rs.getString("DataEnvio");
            String Entrega = rs.getString("DataEntrega");
            
            
            DefaultTableModel dtmClientes = (DefaultTableModel)jTDev.getModel();
            
            Object[] dados = {NomeProd,PrecoProd,Envio,Entrega};
            dtmClientes.addRow(dados);
            
            }
            }
            
            
        } catch (SQLException ex) {
        
        }
	break;
        case 2: 
        rs = null;
        Consulta = "select * from estoque"; //adaptar posteriormente
       
        cn = new Conexao();
        try {
            ConsultaSQL con = new ConsultaSQL(cn.getConexao(),Consulta);
            if (con.getError() == null){
            rs = con.getResultado();
            
            while(rs.next()){
            String NomeFornecedor = (String) rs.getObject("NomeFornecedor");
            String Produto = rs.getString("Produto");
            String Garantia = rs.getString("Garantia");
            String DataRecebimento = rs.getString("DataRecebimento");
            
            
            DefaultTableModel dtmClientes = (DefaultTableModel)jTDev.getModel();
            
            Object[] dados = {NomeFornecedor,Produto,Garantia,DataRecebimento};
            dtmClientes.addRow(dados);
            
            }
            }
            
            
        } catch (SQLException ex) {
        
        }
        break;
 	case 3:
        rs = null;
        Consulta = "select*from clientes";

        cn = new Conexao();
        try {
            ConsultaSQL con = new ConsultaSQL(cn.getConexao(),Consulta);
            if (con.getError() == null){
            
            rs = con.getResultado();
            
            while(rs.next()){
            String nome = (String) rs.getObject("Nome");
            String telefone = rs.getString("Telefone");
            String rg = rs.getString("RG");
            String cpf = rs.getString("CPF");
            String email = rs.getString("Email");
            
            
            DefaultTableModel dtmClientes = (DefaultTableModel)jTDev.getModel();
            
            Object[] dados = {nome,telefone,rg,cpf,email};
            dtmClientes.addRow(dados);
            }
            } 
        } catch (SQLException ex) {
        
        }
        
        break;
	case 4:
        rs = null;
        
        Consulta = "select * from funcionarios"; //adaptar posteriormente
       
        cn = new Conexao();
        try {
            ConsultaSQL con = new ConsultaSQL(cn.getConexao(),Consulta);
            if (con.getError() == null){
            
            rs = con.getResultado();// ele só pega o primeiro resultado
            
            while(rs.next()){
            String cpf = rs.getString("CPF");
            String rg = rs.getString("RG");
            String nome = rs.getString("Nome");
            String telefone = rs.getString("Telefone");
            String email = rs.getString("Email");
            
            
            DefaultTableModel dtmClientes = (DefaultTableModel)jTDev.getModel();
            
            Object[] dados = {nome,telefone,rg,cpf,email};
            dtmClientes.addRow(dados);
            
            }
            }
            
            
        } catch (SQLException ex) {
        
        } 
        break;
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       PaineldeManipulação painel = new PaineldeManipulação();
       this.dispose();
       painel.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaineldeManipulação.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaineldeManipulação.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaineldeManipulação.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaineldeManipulação.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaineldeManipulação().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Atualizar;
    private javax.swing.JTextField ComandoSTR;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTDev;
    // End of variables declaration//GEN-END:variables
}
